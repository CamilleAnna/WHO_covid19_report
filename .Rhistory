Td.report.clean$ci.upp %in% c(NA, 'NA', Inf, 'Inf') |
Td.report.clean$ci.low %in% c(NA, 'NA', Inf, 'Inf') |
Td.report.clean$`Incidence doubling time (days)` %in% c(NA, 'NA', Inf, 'Inf')
) # identify countrys with issue
Td.report.clean[has.pb,2:4]<- 'NA' # Set entire row as NA
Td.report.clean2<- # For better information convey, arrange by doubling Time
Td.report.clean %>%
arrange(as.numeric(`Incidence doubling time (days)`))
# DOUBLING TIMES: Deaths----
# This sections works exactly as the previous one but for deaths.
# The output is stored in the Td.report.deaths tables and sims.store.deaths list
t2<-  d.deaths$date[which.min(abs(d.deaths$date-t2.define))]
t1<- d.deaths$date[which.min(abs(d.deaths$date-(t1.define)))]
Td.report.deaths<- data.frame(variable = character(), Td.obs = numeric(), ci.low = numeric(), ci.upp = numeric(), t1 = character(), t2 = character())
regions<- colnames(d.deaths)[-1]
sims.store.deaths<- vector('list', length = length(regions))
for(r in 1:length(regions)){
d.clean<-
d.deaths[,c(1, which(colnames(d.deaths) == regions[r]))] %>%
rename(cumNumCases = paste(regions[r])) %>% # naming 'cumNumCases' because that's how sim.epi() takes variable as argument. But it is indeed DEATHS (cases of deaths ...). A bit confusing, sim.epi() function may be improved to make it general and avoid forcing the variable be named 'cumNumCases' ...
as.data.frame()
d.clean.sim<- sim.epi(d.clean, its = its, plotsim = FALSE) # Simulate poisson error on raw DEATHS
d.clean.sim.cum<-
d.clean.sim %>%
select(-date, -cumNumCases) %>%
mutate_all(~ cumsum(.) * (1000/(who.info.tab[who.info.tab$country == regions[r], 'popsize']))) %>%
rename(cumNumCases = numNewCases) %>%
cbind(date = d.clean.sim$date) %>%
select(c(ncol(.), seq(1, ncol(.)-1)))
d.clean.sim.cum.list<-
d.clean.sim.cum %>%
select(-date) %>%
as.list()
Tds<- sapply(d.clean.sim.cum.list,
Td.lapply,
dates = d.clean.sim.cum$date,
t1 = t1, t2 = t2)
# Observed and bootstrap distribution of Tds
Td.obs<- as.numeric(Tds['cumNumCases'])
Td.bootstrap<- as.numeric(Tds[-which(names(Tds) == 'cumNumCases')])
Td.bootstrap<- Td.bootstrap[!is.na(Td.bootstrap == TRUE)]
# Get CI from distribution of Td
ci.low<- round(quantile(Td.bootstrap, c(0.05), method = 6), 1)[[1]]
ci.upp<- round(quantile(Td.bootstrap, c(0.95), method = 6), 1)[[1]]
Td.report.deaths<- rbind(Td.report.deaths,
data.frame(variable = paste(regions[r]),
Td.obs = Td.obs[[1]],
ci.low = ci.low,
ci.upp = ci.upp,
t1 = t1,
t2 = t2)
)
d.clean.sim.cum$country = regions[r]
sims.store.deaths[[r]]<- d.clean.sim.cum
colnames(sims.store.deaths[[r]])[2]<- 'observed'
}
Td.report.deaths <-
Td.report.deaths %>%
rename(country = variable)
Td.report.deaths.clean<-
Td.report.deaths %>%
left_join(who.info.tab, by = 'country') %>%
select(full_name, Td.obs, ci.low, ci.upp) %>%
rename(Country = full_name,
`Deaths doubling time (days)` = Td.obs)
has.pb<- which(
Td.report.deaths.clean$ci.upp %in% c(NA, 'NA', Inf, 'Inf') |
Td.report.deaths.clean$ci.low %in% c(NA, 'NA', Inf, 'Inf') |
Td.report.deaths.clean$`Deaths doubling time (days)` %in% c(NA, 'NA', Inf, 'Inf')
)
Td.report.deaths.clean[has.pb,2:4]<- 'NA'
Td.report.deaths.clean2<-
Td.report.deaths.clean %>%
arrange(as.numeric(`Deaths doubling time (days)`))
# The TWO NEXT SECTIONS are to collect the Last day incidence of the observed data but ALSO OF THE SIMULATED DATA
# that, to be able to report a 95%CI on the observed data
# Done on the raw number of cases and the per 10k pop
# Last day Incidence & CI, raw ----
dat.cumsumraw<- vector('list', length = length(regions))
for(i in 1:length(sims.store)){
latest<- sims.store[[i]] %>% # for data of country i, stored in item y of the simulation list
rename(cumNumCase_raw = observed) %>%
tail(., 1) # Get the last row = last date
# Transform back to be RAW number of cases (NOT per 10k)
latest[,2:(ncol(latest)-1)]<- latest[,2:(ncol(latest)-1)] * ((who.info.tab[who.info.tab$country == unique(sims.store[[i]]$country), 'popsize'])/10000)
# Extract only the simulations, compute 95%CI from it
cumNumCases_raw.sim.last<- as.numeric(latest[,which(substr(colnames(latest), 1, 1) == 'V')])
ci.low.cumNumCases_raw<- quantile(cumNumCases_raw.sim.last, c(0.05), method = 6, na.rm = TRUE)[[1]]
ci.upp.cumNumCases_raw<- quantile(cumNumCases_raw.sim.last, c(0.95), method = 6, na.rm = TRUE)[[1]]
dat.cumsumraw[[i]]<- # Store it
latest %>%
select(date, country, cumNumCase_raw) %>%
mutate(ci.low = ci.low.cumNumCases_raw,
ci.upp = ci.upp.cumNumCases_raw)
}
# Do some formatting to output a nice and clean table in the report
dat.cumsumraw.df<- do.call('rbind', dat.cumsumraw) %>%
select(country, cumNumCase_raw, ci.low, ci.upp) %>%
arrange(-cumNumCase_raw) %>%
rename(country = country,
`Cum. Incidence` = cumNumCase_raw)
dat.cumsumraw.df$`Cum. Incidence`<- formatC(dat.cumsumraw.df$`Cum. Incidence`, digits = 0, format = "f") # Format numbers to be with 1 digit, even those with 0 digits (e.g. 4 --> 4.0)
dat.cumsumraw.df$ci.low<- formatC(dat.cumsumraw.df$ci.low, digits = 0, format = "f")
dat.cumsumraw.df$ci.upp<- formatC(dat.cumsumraw.df$ci.upp, digits = 0, format = "f")
dat.cumsumraw.df<- dat.cumsumraw.df %>%
left_join(who.info.tab, by = 'country') %>%
select(full_name, `Cum. Incidence`, ci.low, ci.upp) %>%
rename(Country = full_name)
dat.cumsumraw.df$`Cum. Incidence`[dat.cumsumraw.df$`Cum. Incidence` == 'NA']<- 0
# Last day Incidence & CI 10k ----
# Doing the exact same thing but without transforming back into raw number of cases (keep normalised per 10k.)
# Unsure which one will be required to be plotted in the end... Now both are available.
dat.cumsum10k<- vector('list', length = length(regions))
for(i in 1:length(sims.store)){
latest<- sims.store[[i]] %>%
rename(cumNumCase_10k = observed) %>%
tail(., 1)
cumNumCases_10k.sim.last<- as.numeric(latest[,which(substr(colnames(latest), 1, 1) == 'V')])
ci.low.cumNumCases_10k<- quantile(cumNumCases_10k.sim.last, c(0.05), method = 6, na.rm = TRUE)[[1]]
ci.upp.cumNumCases_10k<- quantile(cumNumCases_10k.sim.last, c(0.95), method = 6, na.rm = TRUE)[[1]]
dat.cumsum10k[[i]]<-
latest %>%
select(date, country, cumNumCase_10k) %>%
mutate(ci.low = ci.low.cumNumCases_10k,
ci.upp = ci.upp.cumNumCases_10k)
}
dat.cumsum10k.df<- do.call('rbind', dat.cumsum10k) %>%
select(country, cumNumCase_10k, ci.low, ci.upp) %>%
arrange(-cumNumCase_10k) %>%
rename(country = country,
`Cum. Incidence per 10k pop.` = cumNumCase_10k)
dat.cumsum10k.df$`Cum. Incidence per 10k pop.`<- formatC(dat.cumsum10k.df$`Cum. Incidence per 10k pop.`, digits = 4, format = "f")
dat.cumsum10k.df$ci.low<- formatC(dat.cumsum10k.df$ci.low, digits = 4, format = "f")
dat.cumsum10k.df$ci.upp<- formatC(dat.cumsum10k.df$ci.upp, digits = 4, format = "f")
dat.cumsum10k.df<- dat.cumsum10k.df %>%
left_join(who.info.tab, by = 'country') %>%
select(full_name, `Cum. Incidence per 10k pop.`, ci.low, ci.upp) %>%
rename(Country = full_name)
dat.cumsum10k.df$`Cum. Incidence per 10k pop.`[dat.cumsum10k.df$`Cum. Incidence per 10k pop.` == '   NA']<- 0
# FUNCTION PLOTTING BY COUNTRY FIGURES ----
# I could not find a way to loop over the figure-producing for each country while creating new header each time in the Rmarkdown.
# I had to have one r code chunck per country, under 47 headers, in order to have the countries listed in the Table of Content.
# The hack I got away with  was wrapping this code into a "function", which only takes as argument the index "c" corresponding to the columns in the dataframe for which to plot the data (so we start at c = 2, because the first column is the date in the data).
# It is quite hacky/poor-quick-fix, since many variables in it are not even passed as argument of the function, but are environement variables defined in the Rmarkdown. Hence, if you change those variables in the Rmarkdown doc or do not define them, this piece of code will not work.
plot.country<- function(c){
# SET UP THE PLOT AREA
par(mfrow = c(2,2),
oma = c(2,2,4,1) + 0.1,
mar = c(2,2,1,1) + 0.1)
# RAW CASES
# Set plot, add axes, add background gridlines
plot('', xlim = range(xseq.fbc), ylim = range(yseq.raw.cases), xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
axis(1, at = xseq.fbc, labels = format(xseq.fbc, date.format), font = x.font.fbc, cex.axis = x.cex.fbc)
axis(2, at = yseq.raw.cases, font = y.font.fbc, cex.axis = y.cex.fbc)
abline(v = xseq.fbc, h = yseq.raw.cases, col = 'lightgrey', lty = 'dotted')
for(c2 in 2:ncol(d)){
lines(d[,c2] ~ d$date, lwd = 1.5, col = 'grey')
} # Draw lines + overplot focal country line
lines(d[,c] ~ d$date, lwd = 3)
# LOG CASES
# Set plot, add axes, add background gridlines
plot('', xlim = range(xseq.fbc), ylim = range(yseq.log.cases), xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
axis(1, at = xseq.fbc, labels = format(xseq.fbc, date.format), font = x.font.fbc, cex.axis = x.cex.fbc)
axis(2, at = yseq.log.cases, labels = as.character(10^yseq.log.cases), font = y.font.fbc, cex.axis = y.cex.fbc)
abline(v = xseq.fbc, h = yseq.log.cases, col = 'lightgrey', lty = 'dotted')
for(c2 in 2:ncol(d.10k.log)){
lines(d.10k.log[,c2] ~ d.10k.log$date, lwd = 1.5, col = 'grey')
} # Draw lines + overplot focal country line
lines(d.10k.log[,c] ~ d.10k.log$date, lwd = 3)
# DEATHS RAW
plot('', xlim = range(xseq.fbc), ylim = range(yseq.raw.deaths), xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
axis(1, at = xseq.fbc, labels = format(xseq.fbc, date.format), font = x.font.fbc, cex.axis = x.cex.fbc)
axis(2, at = yseq.raw.deaths, font = y.font.fbc, cex.axis = y.cex.fbc)
abline(v = xseq.fbc, h = yseq.raw.deaths, col = 'lightgrey', lty = 'dotted')
for(c2 in 2:ncol(d.deaths)){
lines(d.deaths[,c2] ~ d.deaths$date, lwd = 1.5, col = 'grey')
} # Draw lines + overplot focal country line
lines(d.deaths[,c] ~ d.deaths$date, lwd = 3)
# DEATHS LOG
plot('', xlim = range(xseq.fbc), ylim = range(yseq.log.deaths), xaxt = 'n', yaxt = 'n', xlab = '', ylab = '')
axis(1, at = xseq.fbc, labels = format(xseq.fbc, date.format), font = x.font.fbc, cex.axis = x.cex.fbc)
axis(2, at = yseq.log.deaths, labels = as.character(10^yseq.log.deaths), font = y.font.fbc, cex.axis = y.cex.fbc)
abline(v = xseq.fbc, h = yseq.log.deaths, col = 'lightgrey', lty = 'dotted')
for(c2 in 2:ncol(d.deaths.10k.log)){
lines(d.deaths.10k.log[,c2] ~ d.deaths.10k.log$date, lwd = 1.5, col = 'grey')
}
lines(d.deaths.10k.log[,c] ~ d.deaths.10k.log$date, lwd = 3)
# ADD LABELS
# Y-labels
mtext('Cases', side = 2, line = ylab.line.fbc, outer = TRUE, col = 'black', cex = ylab.cex.fbc, font = ylab.f.fbc, at = 0.75)
mtext('Deaths', side = 2, line = ylab.line.fbc, outer = TRUE, col = 'black', cex = ylab.cex.fbc, font = ylab.f.fbc, at = 0.25)
# X-labels
mtext('Cumulative cases per 10k pop.', side = 3, line = xTOPlab.line.fbc, outer = TRUE, col = 'black', cex = xTOPlab.cex.fbc, font = xTOPlab.f.fbc, at = 0.77)
mtext('Cumulative cases', side = 3, line = xTOPlab.line.fbc, outer = TRUE, col = 'black', cex = xTOPlab.cex.fbc, font = xTOPlab.f.fbc, at = 0.25)
mtext('Date (dd/mm)', side = 1, line = xBOTTOMlab.line.fbc, outer = TRUE, col = 'black', cex = xBOTTOMlab.cex.fbc, font = xBOTTOMlab.f.fbc)
# TITLE
mtext(paste(who.info.tab[match(countries[c], who.info.tab$country), 'full_name']), side = 3, line = 2, outer = TRUE, col = 'black', cex = 2, font = 2)
}
# DATA FOR MAPS ----
# tmp1<- gather(tail(d,1), 'country', 'total_cases', 2:ncol(d))[,-1]
# tmp2<- gather(tail(d.deaths,1), 'country', 'total_deaths', 2:ncol(d.deaths))[,-1]
#
# tmp3<- d %>%
#   gather('country', 'cumcases', 2:ncol(d)) %>%
#   left_join(pops, by = 'country') %>%
#   mutate(cumcases_10k = cumcases * (10000/popsize)) %>%
#   select(date, country, cumcases_10k) %>%
#   spread(country, cumcases_10k) %>%
#   tail(., 1) %>%
#   gather('country', 'CaseperPop', 2:ncol(d))%>%
#   select(-date)
#
# tmp4<- d.deaths %>%
#   gather('country', 'cumDeaths', 2:ncol(d.deaths)) %>%
#   left_join(pops, by = 'country') %>%
#   mutate(cumDeaths_10k = cumDeaths * (10000/popsize)) %>%
#   select(date, country, cumDeaths_10k) %>%
#   spread(country, cumDeaths_10k) %>%
#   tail(., 1) %>%
#   gather('country', 'DeathsperPop', 2:ncol(d.deaths))%>%
#   select(-date)
#
# who_data<- left_join(iso3, pops, by = 'country') %>%
#   left_join(tmp1, 'country') %>%
#   left_join(tmp2, 'country') %>%
#   left_join(tmp3, 'country') %>%
#   left_join(tmp4, 'country') %>%
#   replace(is.na(.), 0) %>%
#   as.data.frame() %>%
#   rename(pop = popsize)
#iso3<- read.table('input_files/Africa_countryISO3.txt', header=TRUE, sep = '\t')
#iso3.temp<- rename(iso3, Country = country)
who_dt_data<- # Assemble the doubling times formatted for maps plotting
left_join(who.info.tab[,c('ISO3', 'country')], Td.report[,1:2], by = 'country') %>%
left_join(Td.report.deaths[,1:2], by = 'country') %>%
rename(Dt_cases = Td.obs.x,
Dt_deaths = Td.obs.y,
countryterritoryCode = ISO3)%>%
replace(is.na(.), 0)
who_dt_data$Dt_cases[which(who_dt_data$Dt_cases == 'Inf')]<- 0
who_dt_data$Dt_deaths[which(who_dt_data$Dt_deaths == 'Inf')]<- 0
# PRODUCE THE MAPS FOR THE REPORT ----
africa <- geojson_read("./input_files/Africa1.geojson", what="sp")
africa@data %<>% left_join(who_data, by=c("ISO_A3"="countryterritoryCode"))
# Map CASES ----
breaks <- classIntervals(africa@data$total_cases, n = 8, style = "jenks", na.rm=T)$brks
breaks <- c(0,breaks)
breaks[2]<-1
palblue <- brewer.pal(9, name = "Blues")
palblue[1]<-"#FFFFFF"
png(filename = paste0('./output/Map_cum_cases_', today, '_.png'), width=1920, height=1240, pointsize = 22)
choroLayer(spdf = africa, var = "total_cases", colNA = "grey", legend.nodata = "Non WHO-Africa country",
breaks=breaks, col=palblue,legend.title.txt = "Cumulative Cases", legend.title.cex = 1,
legend.values.cex = 1, legend.pos = c(-30,-40))
dev.off()
# Map CASES 10k ----
breaks <- classIntervals(africa@data$CaseperPop, n = 8, style = "jenks", na.rm=T)$brks
breaks <- c(0,breaks)
breaks[2]<-0.000001
palblue <- brewer.pal(9, name = "Blues")
palblue[1]<-"#FFFFFF"
png(filename = paste0('./output/Map_cases_10k_pop_', today, '_.png'), width=1920, height=1240, pointsize = 22)
choroLayer(spdf = africa, var = "CaseperPop", colNA = "grey", legend.nodata = "Non WHO-Africa country",
breaks=breaks, col=palblue,legend.title.txt = "Cum. cases per 10k pop.", legend.title.cex = 1,
legend.values.cex = 1, legend.values.rnd = 3, legend.pos = c(-30,-40))
dev.off()
# Map DEATHS ----
breaks <- classIntervals(africa@data$total_deaths, n = 6, style = "jenks", na.rm=T)$brks
breaks[2]<-1
palred <- brewer.pal(7, name = "Reds")
palred[1]<-"#FFFFFF"
png(filename = paste0('./output/Map_cum_deaths_', today, '_.png'), width=1920, height=1240, pointsize = 22)
choroLayer(spdf = africa, var = "total_deaths", colNA = "grey", legend.nodata = "Non WHO-Africa country",
breaks=breaks, col=palred,legend.title.txt = "Cumulative Deaths", legend.title.cex = 1,
legend.values.cex = 1, legend.values.rnd = 3, legend.pos = c(-30,-40))
dev.off()
# Map DEATHS 10k ----
breaks <- classIntervals(africa@data$DeathsperPop, n = 6, style = "jenks", na.rm=T)$brks
breaks <- c(0,breaks)
breaks[2]<-0.0000001
palred <- brewer.pal(7, name = "Reds")
palred[1]<-"#FFFFFF"
png(filename = paste0('./output/Map_deaths_10k_pop_', today, '_.png'), width=1920, height=1240, pointsize = 22)
choroLayer(spdf = africa, var = "DeathsperPop", colNA = "grey", legend.nodata = "Non WHO-Africa country",
breaks=breaks, col=palred,legend.title.txt = "Cum. deaths per 10k pop.", legend.title.cex = 1,
legend.values.cex = 1, legend.values.rnd = 3, legend.pos = c(-30,-40))
dev.off()
# Map Dt CASES ----
africa@data %<>% left_join(who_dt_data, by=c("ISO_A3"="countryterritoryCode"))
breaks <- classIntervals(africa@data$Dt_cases, n = 9, style = "jenks", na.rm=T)$brks
breaks[2]<-0.00001
palgreen <- brewer.pal(9, name = "Greens")
palgreen <- rev(palgreen)
palgreen[1]<-"#FFFFFF"
png(filename = paste0('./output/Map_dt_cases_', today, '_.png'), width=1920, height=1240, pointsize = 22)
choroLayer(spdf = africa, var = "Dt_cases", colNA = "grey", legend.nodata = "Non WHO-Africa country",
breaks=breaks, col=palgreen,legend.title.txt = "Doubling time cases (days)", legend.title.cex = 1,
legend.values.cex = 1, legend.values.rnd = 3, legend.pos = c(-30,-40))
dev.off()
# 2.6: Dt DEATHS ----
breaks <- classIntervals(africa@data$Dt_deaths, n = 6, style = "jenks", na.rm=T)$brks
breaks[2]<-0.00001
palgreen <- brewer.pal(7, name = "Greens")
palgreen <- rev(palgreen)
palgreen[1]<-"#FFFFFF"
png(filename = paste0('./output/Map_dt_deaths_', today, '_.png'), width=1920, height=1240, pointsize = 22)
choroLayer(spdf = africa, var = "Dt_deaths", colNA = "grey", legend.nodata = "Non WHO-Africa country",
breaks=breaks, col=palgreen,legend.title.txt = "Doubling time deaths (days)", legend.title.cex = 1,
legend.values.cex = 1, legend.values.rnd = 3, legend.pos = c(-30,-40))
dev.off()
# ASSEMBLE MAPS ----
#crop images and create 2x6 plot
#This assumes images are 1920x1240, will centre-crop to 1080x960
#Read images
image1 <- image_read(paste0("./output/Map_cum_Cases_", today, "_.png"))
image2 <- image_read(paste0("./output/Map_cases_10k_pop_", today, "_.png"))
image3 <- image_read(paste0("./output/Map_cum_deaths_", today, "_.png"))
image4 <- image_read(paste0("./output/Map_deaths_10k_pop_", today, "_.png"))
image5 <- image_read(paste0("./output/Map_dt_cases_", today, "_.png"))
image6 <- image_read(paste0("./output/Map_dt_deaths_", today, "_.png"))
#Crop images
image1_crop <- image_crop(image1, "1080x960+420+140")
image2_crop <- image_crop(image2, "1080x960+420+140")
image3_crop <- image_crop(image3, "1080x960+420+140")
image4_crop <- image_crop(image4, "1080x960+420+140")
image5_crop <- image_crop(image5, "1080x960+420+140")
image6_crop <- image_crop(image6, "1080x960+420+140")
#save to 3x2 plot-
png(file = paste0("./output/6Maps_WHO_Africa_", today, "_.png"), width=1080*2, height=960*3, pointsize=22)
par(mai=rep(0,4)) # no margins
layout(matrix(1:6, ncol=2, byrow=TRUE))
plot(NA, xlim=0:1, ylim=0:1, bty="n", axes=0, xaxs = 'i', yaxs='i')
rasterImage(image1_crop, 0, 0, 1,1)
plot(NA, xlim=0:1, ylim=0:1, bty="n", axes=0, xaxs = 'i', yaxs='i')
rasterImage(image2_crop, 0, 0, 1,1)
plot(NA, xlim=0:1, ylim=0:1, bty="n", axes=0, xaxs = 'i', yaxs='i')
rasterImage(image3_crop, 0, 0, 1,1)
plot(NA, xlim=0:1, ylim=0:1, bty="n", axes=0, xaxs = 'i', yaxs='i')
rasterImage(image4_crop, 0, 0, 1,1)
plot(NA, xlim=0:1, ylim=0:1, bty="n", axes=0, xaxs = 'i', yaxs='i')
rasterImage(image5_crop, 0, 0, 1,1)
plot(NA, xlim=0:1, ylim=0:1, bty="n", axes=0, xaxs = 'i', yaxs='i')
rasterImage(image6_crop, 0, 0, 1,1)
dev.off()
# SAVE OUTPUT RData ----
save.image(paste0('output/WHO_report_analysis_', today, '.RData'))
today<- Sys.Date() - 1
library(plyr)
load(paste0('/Users/s1687811/Documents/GitHub/WHO_covid19_report/output/WHO_report_analysis_', as.character(today), '.RData'))
countries<- colnames(d)
head(countries)
length(countries)
plot.country(c = 47)
# PARAMETERS FIGURE BY COUNTRY  (bc)----
x.font.fbc = 2
y.font.fbc = 2
x.cex.fbc = 1.2
y.cex.fbc = 1.2
ylab.cex.fbc = 1.2
ylab.f.fbc = 2
ylab.line.fbc = 1
xTOPlab.cex.fbc = 1.2
xTOPlab.f.fbc = 2
xTOPlab.line.fbc = 0
xBOTTOMlab.cex.fbc = 1.2
xBOTTOMlab.f.fbc = 2
xBOTTOMlab.line.fbc = 1
start.date.fbc = as.Date("2020-03-08") # forced starting date for x-axis in fig1
x.axti.fbc = 5
y.axti.fbc.rawCases = 100
y.axti.fbc.rawDeaths = 5
y.axti.fbc.logCases = 1
y.axti.fbc.logDeaths = 1
xseq.fbc = seq.Date(from = min(d$date), to = max(d$date), by = x.axti.fbc)
# y-scale for raw cases
thirdWorst<- rev(sort(tail(d, 1)[,-1]))[[3]]
thirdWorstPadded<- round_any(thirdWorst, 100)
yseq.raw.cases = seq(0, thirdWorstPadded, y.axti.fbc.rawCases)
# y-scale for raw deaths
secondworstDeaths<- rev(sort(tail(d.deaths,1)[,-1]))[[2]]
secondworstDeathsPadded<- secondworstDeaths+1 #round_any(worstDeaths, 10, f = ceiling)
yseq.raw.deaths = seq(0, secondworstDeathsPadded, y.axti.fbc.rawDeaths)
# y-scale for log 10k cases
yseq.log.cases<- seq(round_any(range(d.10k.log[,2:ncol(d.10k.log)], na.rm = TRUE)[1], 1, f = floor),
round_any(range(d.10k.log[,2:ncol(d.10k.log)], na.rm = TRUE)[2], 1, f = ceiling),
y.axti.fbc.logCases)
# y-scale for log 10k deaths
yseq.log.deaths<- seq(round_any(range(d.deaths.10k.log[,2:ncol(d.deaths.10k.log)], na.rm = TRUE)[1], 1, f = floor),
round_any(range(d.deaths.10k.log[,2:ncol(d.deaths.10k.log)], na.rm = TRUE)[2], 1, f = ceiling),
y.axti.fbc.logDeaths)
plot.country(c = 47)
# SET UP CHUNK OPTIONS ---
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(tidy = TRUE)
knitr::opts_chunk$set(message=FALSE)
today<- Sys.Date() - 1
library(plyr)
load(paste0('/Users/s1687811/Documents/GitHub/WHO_covid19_report/output/WHO_report_analysis_', as.character(today), '.RData'))
source('/Users/s1687811/Documents/GitHub/WHO_covid19_report/script/sourced_functions_doublingTime_reports.R')
# FIGURES PARAMETERS ---
palette<- brewer.pal(10, 'Paired') # 10 colorblind-friendly palette
palette.top10<- c(rep('black', ncol(d) - length(palette)), palette) # 10 colors, the rest black
# FIGURES PARAMETERS
# conventions:
# each element is followed by .f1, ..., .fn for figure1, ..., figuren
# y.axti / x.axti = y/x axis ticks interval
# yseq / xseq = sequence of y/x axes ticks to plot
# y.cex / x.cex = font size of y / x axis
# y.font / x.font = font type of y / x axis (1 = normal, 2 = bold)
# ylab.cex = size of y-axis label
# ylab.f =   font of y-axis label
# ylab.line =  space between figure and y-axis label
date.format = "%d/%m"
# PARAMETERS FIGURE 1 ----
start.date.f1 = as.Date("2020-03-08") # forced starting date for x-axis in fig1
x.axti.f1 = 5
y.axti.f1 = 100
secondWorst<- rev(sort(tail(d, 1)[,-1]))[[2]]
secondWorstPadded<- round_any(secondWorst, 100)
yseq.f1 = seq(0, secondWorstPadded, y.axti.f1)
#yseq.f1 = seq(0, max(d.long$cumNumCases) - (max(d.long$cumNumCases) %% y.axti.f1), y.axti.f1)
xseq.f1 = seq.Date(from = start.date.f1, to = max(d$date), by = x.axti.f1)
x.font.f1 = 2
y.font.f1 = 2
x.cex.f1 = 1
y.cex.f1 = 1
ylab.cex.f1 = 1.2
ylab.f.f1 = 2
ylab.line.f1 = 2.5
xlab.cex.f1 = 1.2
xlab.f.f1 = 2
xlab.line.f1 = 2.5
# PARAMETERS FIGURE 2 ----
start.date.f2 = as.Date("2020-03-08") # forced starting date for x-axis in fig2
x.axti.f2 = 7
y.axti.f2 = 1
yseq.f2 = seq(
min(d.10k.log.long$cumcases_10k_log, na.rm = TRUE) - min(d.10k.log.long$cumcases_10k_log, na.rm = TRUE) %% y.axti.f2,
max(d.10k.log.long$cumcases_10k_log, na.rm = TRUE) - max(d.10k.log.long$cumcases_10k_log, na.rm = TRUE) %% y.axti.f2,
y.axti.f2)
xseq.f2 = seq.Date(from = start.date.f2, to = max(d.10k.log$date), by = x.axti.f2)
x.font.f2 = 2
y.font.f2 = 2
x.cex.f2 = 1
y.cex.f2 = 1
ylab.cex.f2 = 1.2
ylab.f.f2 = 2
ylab.line.f2 = 2.5
xlab.cex.f2 = 1.2
xlab.f.f2 = 2
xlab.line.f2 = 2.5
# PARAMETERS FIGURE 4 ----
start.date.f4 = as.Date("2020-03-08") # forced starting date for x-axis in fig1
x.axti.f4 = 2
y.axti.f4 = 1
yseq.f4 = seq(0, max(d.deaths.long$cumNumDeaths) - (max(d.deaths.long$cumNumDeaths) %% y.axti.f4), y.axti.f4)
xseq.f4 = seq.Date(from = start.date.f4, to = max(d.deaths$date), by = x.axti.f4)
x.font.f4 = 2
y.font.f4 = 2
x.cex.f4 = 1
y.cex.f4 = 1
ylab.cex.f4 = 1.2
ylab.f.f4 = 2
ylab.line.f4 = 2.5
xlab.cex.f4 = 1.2
xlab.f.f4 = 2
xlab.line.f4 = 2.5
# PARAMETERS FIGURE BY COUNTRY  (bc)----
x.font.fbc = 2
y.font.fbc = 2
x.cex.fbc = 1.2
y.cex.fbc = 1.2
ylab.cex.fbc = 1.2
ylab.f.fbc = 2
ylab.line.fbc = 1
xTOPlab.cex.fbc = 1.2
xTOPlab.f.fbc = 2
xTOPlab.line.fbc = 0
xBOTTOMlab.cex.fbc = 1.2
xBOTTOMlab.f.fbc = 2
xBOTTOMlab.line.fbc = 1
start.date.fbc = as.Date("2020-03-08") # forced starting date for x-axis in fig1
x.axti.fbc = 5
y.axti.fbc.rawCases = 100
y.axti.fbc.rawDeaths = 5
y.axti.fbc.logCases = 1
y.axti.fbc.logDeaths = 1
xseq.fbc = seq.Date(from = min(d$date), to = max(d$date), by = x.axti.fbc)
# y-scale for raw cases
thirdWorst<- rev(sort(tail(d, 1)[,-1]))[[3]]
thirdWorstPadded<- round_any(thirdWorst, 100)
yseq.raw.cases = seq(0, thirdWorstPadded, y.axti.fbc.rawCases)
# y-scale for raw deaths
secondworstDeaths<- rev(sort(tail(d.deaths,1)[,-1]))[[2]]
secondworstDeathsPadded<- secondworstDeaths+1 #round_any(worstDeaths, 10, f = ceiling)
yseq.raw.deaths = seq(0, secondworstDeathsPadded, y.axti.fbc.rawDeaths)
# y-scale for log 10k cases
yseq.log.cases<- seq(round_any(range(d.10k.log[,2:ncol(d.10k.log)], na.rm = TRUE)[1], 1, f = floor),
round_any(range(d.10k.log[,2:ncol(d.10k.log)], na.rm = TRUE)[2], 1, f = ceiling),
y.axti.fbc.logCases)
# y-scale for log 10k deaths
yseq.log.deaths<- seq(round_any(range(d.deaths.10k.log[,2:ncol(d.deaths.10k.log)], na.rm = TRUE)[1], 1, f = floor),
round_any(range(d.deaths.10k.log[,2:ncol(d.deaths.10k.log)], na.rm = TRUE)[2], 1, f = ceiling),
y.axti.fbc.logDeaths)
countries<- colnames(d)
plot.country(c = 47)
View(d)
plot.country(c = 38)
plot.country(c = 39)
plot.country(c = 38)
plot.country(c = 48)
