source('/Users/s1687811/Documents/GitHub/WHO_covid19_report/script/sourced_functions_doublingTime_reports.R')
today<- Sys.Date() - 1
library(plyr)
load(paste0('/Users/s1687811/Documents/GitHub/WHO_covid19_report/output/WHO_report_analysis_', as.character(today), '.RData'))
# SET UP CHUNK OPTIONS ---
knitr::opts_chunk$set(echo = FALSE)
knitr::opts_chunk$set(warning = FALSE)
knitr::opts_chunk$set(tidy = TRUE)
knitr::opts_chunk$set(message=FALSE)
source('/Users/s1687811/Documents/GitHub/WHO_covid19_report/script/sourced_functions_doublingTime_reports.R')
today<- Sys.Date() - 1
library(plyr)
load(paste0('/Users/s1687811/Documents/GitHub/WHO_covid19_report/output/WHO_report_analysis_', as.character(today), '.RData'))
# FIGURES PARAMETERS ---
palette<- brewer.pal(10, 'Paired') # 10 colorblind-friendly palette
palette.top10<- c(rep('black', ncol(d) - length(palette)), palette) # 10 colors, the rest black
# FIGURES PARAMETERS
# conventions:
# each element is followed by .f1, ..., .fn for figure1, ..., figuren
# y.axti / x.axti = y/x axis ticks interval
# yseq / xseq = sequence of y/x axes ticks to plot
# y.cex / x.cex = font size of y / x axis
# y.font / x.font = font type of y / x axis (1 = normal, 2 = bold)
# ylab.cex = size of y-axis label
# ylab.f =   font of y-axis label
# ylab.line =  space between figure and y-axis label
date.format = "%d/%m"
# PARAMETERS FIGURE 1 ----
start.date.f1 = as.Date("2020-03-08") # forced starting date for x-axis in fig1
x.axti.f1 = 5
y.axti.f1 = 100
secondWorst<- rev(sort(tail(d, 1)[,-1]))[[2]]
secondWorstPadded<- round_any(secondWorst, 100)
yseq.f1 = seq(0, secondWorstPadded, y.axti.f1)
#yseq.f1 = seq(0, max(d.long$cumNumCases) - (max(d.long$cumNumCases) %% y.axti.f1), y.axti.f1)
xseq.f1 = seq.Date(from = start.date.f1, to = max(d$date), by = x.axti.f1)
x.font.f1 = 2
y.font.f1 = 2
x.cex.f1 = 1
y.cex.f1 = 1
ylab.cex.f1 = 1.2
ylab.f.f1 = 2
ylab.line.f1 = 2.5
xlab.cex.f1 = 1.2
xlab.f.f1 = 2
xlab.line.f1 = 2.5
# PARAMETERS FIGURE 2 ----
start.date.f2 = as.Date("2020-03-08") # forced starting date for x-axis in fig2
x.axti.f2 = 7
y.axti.f2 = 1
yseq.f2 = seq(
min(d.10k.log.long$cumcases_10k_log, na.rm = TRUE) - min(d.10k.log.long$cumcases_10k_log, na.rm = TRUE) %% y.axti.f2,
max(d.10k.log.long$cumcases_10k_log, na.rm = TRUE) - max(d.10k.log.long$cumcases_10k_log, na.rm = TRUE) %% y.axti.f2,
y.axti.f2)
xseq.f2 = seq.Date(from = start.date.f2, to = max(d.10k.log$date), by = x.axti.f2)
x.font.f2 = 2
y.font.f2 = 2
x.cex.f2 = 1
y.cex.f2 = 1
ylab.cex.f2 = 1.2
ylab.f.f2 = 2
ylab.line.f2 = 2.5
xlab.cex.f2 = 1.2
xlab.f.f2 = 2
xlab.line.f2 = 2.5
# PARAMETERS FIGURE 4 ----
start.date.f4 = as.Date("2020-03-08") # forced starting date for x-axis in fig1
x.axti.f4 = 2
y.axti.f4 = 1
yseq.f4 = seq(0, max(d.deaths.long$cumNumDeaths) - (max(d.deaths.long$cumNumDeaths) %% y.axti.f4), y.axti.f4)
xseq.f4 = seq.Date(from = start.date.f4, to = max(d.deaths$date), by = x.axti.f4)
x.font.f4 = 2
y.font.f4 = 2
x.cex.f4 = 1
y.cex.f4 = 1
ylab.cex.f4 = 1.2
ylab.f.f4 = 2
ylab.line.f4 = 2.5
xlab.cex.f4 = 1.2
xlab.f.f4 = 2
xlab.line.f4 = 2.5
# PARAMETERS FIGURE BY COUNTRY  (bc)----
x.font.fbc = 2
y.font.fbc = 2
x.cex.fbc = 1.2
y.cex.fbc = 1.2
ylab.cex.fbc = 1.2
ylab.f.fbc = 2
ylab.line.fbc = 1
xTOPlab.cex.fbc = 1.2
xTOPlab.f.fbc = 2
xTOPlab.line.fbc = 0
xBOTTOMlab.cex.fbc = 1.2
xBOTTOMlab.f.fbc = 2
xBOTTOMlab.line.fbc = 1
start.date.fbc = as.Date("2020-03-08") # forced starting date for x-axis in fig1
x.axti.fbc = 5
y.axti.fbc.rawCases = 100
y.axti.fbc.rawDeaths = 5
y.axti.fbc.logCases = 1
y.axti.fbc.logDeaths = 1
xseq.fbc = seq.Date(from = min(d$date), to = max(d$date), by = x.axti.fbc)
# y-scale for raw cases
thirdWorst<- rev(sort(tail(d, 1)[,-1]))[[3]]
thirdWorstPadded<- round_any(thirdWorst, 100)
yseq.raw.cases = seq(0, thirdWorstPadded, y.axti.fbc.rawCases)
# y-scale for raw deaths
secondworstDeaths<- rev(sort(tail(d.deaths,1)[,-1]))[[2]]
secondworstDeathsPadded<- secondworstDeaths+1 #round_any(worstDeaths, 10, f = ceiling)
yseq.raw.deaths = seq(0, secondworstDeathsPadded, y.axti.fbc.rawDeaths)
# y-scale for log 10k cases
yseq.log.cases<- seq(round_any(range(d.10k.log[,2:ncol(d.10k.log)], na.rm = TRUE)[1], 1, f = floor),
round_any(range(d.10k.log[,2:ncol(d.10k.log)], na.rm = TRUE)[2], 1, f = ceiling),
y.axti.fbc.logCases)
# y-scale for log 10k deaths
yseq.log.deaths<- seq(round_any(range(d.deaths.10k.log[,2:ncol(d.deaths.10k.log)], na.rm = TRUE)[1], 1, f = floor),
round_any(range(d.deaths.10k.log[,2:ncol(d.deaths.10k.log)], na.rm = TRUE)[2], 1, f = ceiling),
y.axti.fbc.logDeaths)
knitr::include_graphics("/Users/s1687811/Documents/GitHub/WHO_covid19_report/input_files/WHO_Africa.png")
knitr::include_graphics(paste0("/Users/s1687811/Documents/GitHub/WHO_covid19_report/output/6Maps_WHO_Africa_", today, "_.png"))
# 1) SET UP ----
setwd('/Users/s1687811/Documents/GitHub/WHO_covid19_report/')
today<- Sys.Date() - 1  # Set date as to that of the data to fetch.
its = 10 # Number of iterations for the poisson error simulation (bootstrap), Set to 1000. Or 10 for a quick test.
set.seed(as.numeric(today)) # setting seed allows repeatability of poisson error simulations. Use the date as a reference point for the seed.
source('/Users/s1687811/Documents/GitHub/covid19/script/sourced_functions_doublingTime_reports.R') # Source several functions used in the below script. See README file for details.
time_window<- 7 # Time window over which doubling time is calculated
t2.define<- today
t1.define<- t2.define - time_window
library(geojsonio)
library(utils)
library(httr)
library(tidyverse)
library(magrittr)
library(sf)
library(RColorBrewer)
library(classInt)
library(geojson)
library(cartography)
library(magick)
who_data<- read_excel(paste0('./data/', today, '/WHO_Africa_data_', today, '.xlsx'), sheet = 'data for map')
africa <- geojson_read("./input_files/Africa1.geojson", what="sp")
africa@data %<>% left_join(who_data, by=c("ISO_A3"="countryterritoryCode"))
africa@data$WHOCountry <- ifelse(is.na(africa@data$location),0,1)
png(file = "input_files/WHO_Africa3.png", width=1082, height=960, pointsize=22)
typoLayer(spdf = africa, var = "WHOCountry", col = c("darksalmon", "white"), legend.pos = "n")
dev.off()
